OpenEmbedded build system concepts
==================================



Yocto build system workflow
---------------------------

1. Developers specify architecture, policies, patches and configuration details.

2. The build system fetches and downloads the source code from the specified location. Supports downloading tarballs and source code repositories systems such as git/svn.

3. Extracts the sources into a local work area.

4. Patches are applied.

5. Steps for configuring and compiling the software are run.

6. Installs the software into a temporary staging area. Depending on the user configuration, deb/rpm/ipk binaries are generated.

7. Different QA and sanity checks are run throughout entire build process.

8. The build system generates a binary package feed that is used to create the final root file image.

9. Generates the file system image and a customised Extensible SDK (eSDK) for application development in parallel.




Poky source tree
------------------

bitbake/		
	- Holds all Python scripts used by the bitbake command
	- bitbake/bin is placed into the PATH environmental variable so bitbake can be found

build/
	- Contains user configuration files and the output generated by bitbake
	- Is created initially when you source the OpenEmbedded build environment setup script (i.e. oe-init-build-env)

documentation/
	- All documentation sources for the Yocto Project documentation
	- Can be used to generate nice PDFs

meta/
	- Contains the oe-core metadata
	- Holds recipes, common classes, and machine configuration for strictly emulated targets (qemux86, qemuarm, and so forth.)
			
meta-poky	/
	- Holds the configuration for the Poky reference distribution
	- Designed above the meta/ content, this directory adds just enough metadata to define Poky
	- local.conf.sample, bblayers.conf.sample are present here

meta-yocto-bsp/
	- Maintains several reference BSPs such as the Beaglebone, EdgeRouter, and generic versions of both 32-bit and 64-bit x86 machines

meta-selftest/
	- Adds additional recipes and append files used by the OpenEmbedded selftests to verify the behavior of the build system
	- You do not have to add this layer to your bblayers.conf file unless you want to run the selftests

meta-skeleton/	
	- Contains template recipes for BSP and kernel development

scripts/
	- Contains scripts used to set up the environment, development tools, and tools to flash the generated images on the target



oe-init-build-env
-----------------

This script sets up the OpenEmbedded build environment.

Running this script with the source command in a shell makes changes to PATH and sets other core BitBake variables based on the current working directory. 

You need to run an environment setup script before running BitBake commands. 

The script uses other scripts within the scripts directory to do the bulk of the work.



build/conf/
-----------

When you run 'source oe-init-build-env', it will create a "build" folder in that directory

Inside this build folder, it will create a "conf" folder which contains two files:

1. local.conf
2. bblayers.conf



1. local.conf
-------------

Configures almost every aspect of the build system.

Contains local user settings.

Any variable set here overrides any variable set elsewhere within the environment unless that variable is hard-coded within a file (e.g. by using ‘=’ instead of ‘?=’).

MACHINE 
	- The machine the target is built for
	- Eg: MACHINE = "qemux86-64"

DL_DIR
	- Where to place downloads
	- During a first build the system will download many different source code tarballs, from various upstream projects. These are all stored in DL_DIR
	- The default is a downloads directory under TOPDIR which is the build directory

TMP_DIR  
	- Where to place the build output
	- This option specifies where the bulk of the building work should be done and where BitBake should place its temporary files(source extraction, compilation) and output

BB_NUMBER_THREADS
	- Determines the number of tasks that Bitbake will perform in parallel
	- Note: These tasks are related to bitbake and nothing related to compiling
	- Defaults to the number of CPUs on the system
	- $ bitbake -e core-image-minimal | grep ^BB_NUMBER_THREADS=

PARALLEL_MAKE
	- Corresponds to the -j make option
	- Specifies the number of processes that GNU make can run in parallel on a compilation task
	- Defaults to the number of CPUs on the system
	- $ bitbake -e core-image-minimal | grep ^PARALLEL_MAKE=



Important Point:
----------------

'local.conf' file is a very convenient way to override several default configurations over all the Yocto Project's tools.

Essentially, we can change or set any variable, for example, add additional packages to an image file.

Though it is convenient, it should be considered as a temporary change as the 'build/conf/local.conf' file is not usually tracked by any source code management system.	



Where should i place the content of 'conf/local.conf' as this file is part of build folder?
------------------------------------------------------------------------------------------

In general, everything in your 'local.conf' should be moved to your own distro configuration.

Finally, you should only set DISTRO to your own distro in 'local.conf'

The distribution configuration file needs to be created in the 'conf/distro' directory of your layer. You need to name it using your distribution name (e.g. 'mydistro.conf').



2. bblayers.conf
------------------

The 'bblayers.conf' file tells bitbake what layers you want considered during the build.

This configuration file defines layers, which are directory trees, traversed (or walked) by bitbake. 

The bblayers.conf file uses the BBLAYERS variable to list the layers BitBake tries to find.

By default, the layers listed in this file include layers minimally needed by the build system.

However, you must manually add any custom layers you have created.

E.g: 

BBLAYERS = "\
	/home/luis/yocto/poky/meta \
	/home/luis/yocto/poky/meta-poky \
	/home/luis/yocto/poky/meta-yocto-bsp \
	/home/luis/yocto/meta-mylayer \
	"

This example enables four layers, one of which is a custom user defined layer named "meta-mylayer"



Other directories
-----------------

build/downloads/	
	- Downloaded upstream tarballs/git repositories of the recipes used in the build
	- You can reuse the directory for multiple builds or move the directory to another location
	- You can control the location of this directory through the DL_DIR variable

build/sstate-cache	
	- This directory contains the shared state cache
	- You can control the location of this directory through the SSTATE_DIR variable

build/tmp		
	- Holds all the build system output
	- The TMPDIR variable points to this directory

build/tmp/deploy/images/
	- This directory is populated with the basic output objects of the build (think of them as the “generated artifacts” of the build process), including things like the boot loader image, kernel, root filesystem and more 	- If you want to flash the resulting image from a build onto a device, look here for the necessary components
			
build/tmp/cache		
	- When BitBake parses the metadata (recipes and configuration files), it caches the results in build/tmp/cache/ to speed up future builds
	- The results are stored on a per-machine basis



Generated images
----------------

The images produced by the build system are compressed forms of the root filesystem and are ready to boot on a target device.

The build process writes images out to the Build Directory inside the "tmp/deploy/images/" folder.

There are symbolic link pointing to the most recently built file for each machine. These links might be useful for external scripts that need to obtain the latest version of each file.

1. kernel-image: 
	- A kernel binary file
	- The KERNEL_IMAGETYPE variable determines the naming scheme for the kernel image file
	- $ bitbake -e core-image-minimal | grep ^KERNEL_IMAGETYPE=

2. root-filesystem-image: 
	- Root filesystems for the target device (e.g. *.ext3, *.ext4 or *.bz2 files).
	- The IMAGE_FSTYPES variable determines the root filesystem image type
	- $ bitbake -e core-image-minimal | grep ^IMAGE_FSTYPES=

3. kernel-modules:
	- Tarballs that contain all the modules built for the kernel

4. bootloaders:
	- If applicable to the target machine, bootloaders supporting the image
