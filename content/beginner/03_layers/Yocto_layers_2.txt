Exploring layers
================

To ease the exploration of the Yocto Project’s capabilities, it is good to have a real board so we can enjoy the experience of booting our customised embedded system.

This section gives you a minimal description of how to use the Yocto Project to build images for Beaglebone hardware starting from scratch. 

The Beaglebone Black is a low-cost ARM Cortex-A8-based development board. 

Further information is available at https://beagleboard.org/black/.

The Yocto Project officially supports the Beaglebone board and provides a minimal bootable BSP support. 



What is the BSP Layer?
-------------------

A Board Support Package (BSP) is a collection of information that defines how to support a particular hardware device, set of devices, or hardware platform. 

The BSP includes information about the hardware features present on the device and kernel configuration information along with any additional hardware drivers required. 

The BSP also lists any additional software components required in addition to a generic Linux software stack for both essential and optional platform features.

Naming Convention: meta-<bsp_name>

The string “meta-” is prepended to the machine or platform name.



How to find out which hardware devices are supported
----------------------------------------------------

'conf/machine/*.conf' list all the hardware devices supported by the BSP layer.



Discovering the right BSP layer
-------------------------------

We learned that the Yocto Project allows for splitting its metadata among different layers.

The way to find the BSP for a board varies, but generally, we can find it by visiting https:// layers.openembedded.org.

When we choose a board, the first step is to verify the quality of its software support. The low-level components comprise the following:
	
	- Bootloader (such as U-Boot, GRUB, or systemd-boot)
	- Linux kernel (with other required drivers such as GPU or WiFi)
	- User space packages required by hardware acceleration

Those are critical but are not the only aspects to consider. 

	- A reusable disk partition layout (e.g., a WIC .wks template)
	- Ready-to-use machine definitions
	- User space packages integrated for hardware acceleration (usable out of the box)

The maturity level of software enablement, and the Yocto Project BSP, significantly impact the friction involved in using the board and the out-of-the-box experience when using Poky for different boards.

The integration inside the Yocto Project, in a BSP layer form, reduces the friction in the board use as it usually provides the following:



meta-yocto-bsp
--------------

To use this board, we can rely on the meta-yocto-bsp layer, which is included by default in Poky:

	- Provides "reference" BSPs for each of the supported architectures
	- It is based on the mainline kernel/bootloader
	- Does not support any advanced features or anything not in the upstream mainline kernel, e.g., no capes, no power management, no hardware acceleration, no 3D, no PRU, etc.
	
The purpose of this BSP is to have some basic out-of-box experience for the select hardware platforms within Poky to evaluate the Yocto Project and OpenEmbedded framework, but not the specific hardware platforms.

For proper and more comprehensive hardware support users are directed to the corresponding official BSPs - meta-intel, meta-ti, meta-fsl (ARM, PPC), meta-amd, etc.



meta-ti
----------

The official OpenEmbedded/Yocto BSP layer for Texas Instruments platforms.

Most of the advanced features and peripheral support for the wider range of latest TI platforms.

The meta layer can be accessed at https://git.yoctoproject.org/meta-ti/

To create the source structure, download meta-ti using the following command line:

	$ git clone git://git.yoctoproject.org/meta-ti

or use the bitbake-layers script:

	$ bitbake-layers layerindex-fetch meta-ti

Note: layerindex-fetch fetches a layer from a layer index, along with its dependent layers, and adds the layers to the 'conf/bblayers.conf' file



Adding Layers
--------------

Once you have the meta-ti layer, you must add it to your 'bblayers.conf' file.

Two ways:

1. Manual: 
	- Edit bblayers.conf file and add the new layer to BBLAYERS

2. Using the bitbake-layers script: 
	- $ bitbake-layers add-layer <path-to-new-layer>



Steps for building
-------------------

Step1: 
	
	- Source the environment script

		$ source poky/oe-init-build-env

	- Add the meta-ti layer

		$ bitbake-layers add-layer ../meta-ti/

Step2: 

	- Open local.conf and set Machine to beaglebone
	
		MACHINE='beaglebone'

Step3: 

	- You can also set BB_NUMBER_THREADS and PARALLEL_MAKE to twice your host processor's number of cores

		BB_NUMBER_THREADS = "8"
		PARALLEL_MAKE = "-j 8"

	- Also, you can also add this to ease your hard space drive demands during builds

		INHERIT += "rm_work" 


Step4: 

	- Generate an minimal image

		$ bitbake -k core-image-minimal

Step5: 

	- Once the build finished, you will find the output images under "$BUILDDIR/tmp/deploy/images/beaglebone"  



Flashing the image on the sd card using wic
-------------------------------------------

wic images are SD Card images and can be directly written into a sd card.

The file 'core-image-minimal-beaglebone.wic.xz' is a compressed wic image.

You can use the bmap-tools:

	$ sudo bmaptool copy core-image-minimal-beaglebone.wic.bz2 /dev/sdb

Or do it yourself manually:

	- Uncompress the image using the 'unxz' utility:
	$ unxz core-image-minimal-beaglebone.wic.xz

	- Flash it to the sd card:
	$ sudo dd if=core-image-minimal-beaglebone.wic of=/dev/sdb bs=4096 status=progress && sync




